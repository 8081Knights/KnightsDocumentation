{"/docs/":{"data":{"":"This is a test of documentation. You can go ahead an navigate to our FTC docs and FRC docs from the panel over in the side (or in the menu on mobile).","hello-code-snippet#Hello! Code Snippet":" 1 2 3 4 5 public class Main { public static void main(String[] args) { System.out.println(\"HELLO\"); } } And that was some code to test the system to make sure it can format stuff. ‚ÑπÔ∏è You can copy code by hovering over it so a little icon will appear in the corner. Clicking that will copy the code. "},"title":"Documentation"},"/docs/frc/":{"data":{"":"","what-is-on-this-website#What Is on This Website?":"This website is supposed to be a goldmine of knowledge for FIRST teams, as well as our team.\nWe will also use this site as a way to keep track of important information and help with team sustainability over time.","what-is-our-frc-team#What is Our FRC Team?":"Our team, #9777, is our FRC team based off our FTC team #8081 and our sister FTC team Carbo-Knights (team #19728).\nThis team was founded in 2024.","where-do-i-start#Where Do I Start?":"I recommend using this documentation as a reference. There isn‚Äôt a step-by-step guide on how to get started, but looking at our documentation for swerve and other systems could definitely be helpful."},"title":"FRC"},"/docs/frc/programming/":{"data":{"":"You have reached the page for FRC programming Docs. Check out our intro to swerve."},"title":"Programming"},"/docs/frc/programming/intro-to-swerve/":{"data":{"":"This is the Intro to Swerve documentation by the Knight of the Lab Table!!\nAgain, go to the main page if you want to add anything. We‚Äôll try our best to make this an easy understandable guide to make swerve for yourself. You can start here."},"title":"Intro to Swerve"},"/docs/frc/programming/intro-to-swerve/intro/":{"data":{"swerve-drive#Swerve Drive":"Swerve Drive is the implementation of these wheels to power/push your robot so it can drive fast, accurately, and forcefully.","swerve-from-a-hardware-perspective#Swerve From a Hardware Perspective":"Swerve is basically a shopping cart or dolly with spinning wheels. It‚Äôs similar to one of those rotating chairs you sit on.\nThe wheels have two parts: the part that orients or aligns the wheel, and the part that makes it spin or go.\nA good example is the front wheel of a car, there is a ‚Äúmotor‚Äù that turns the wheel (not really, but using it as an example) to face any heading. The other part of the wheel is the drive. The drive is the engine that actually propels the wheel.\n(Yes I know the car geeks will only say that works for 4 wheel drive and that the heading can only go a few degreees, but it‚Äôs hard to make a better example)","what-is-swerve#What is swerve?":"What is swerve?Swerve drive is a fun one to explain, because it takes a long time to fully understand it, but once you do, you cannot go back."},"title":"Intro"},"/docs/frc/programming/intro-to-swerve/looking-at-swerve/":{"data":{"":"","controlling-the-robot#Controlling the Robot":"We use a controller to tell the robot where to go. The first thing we need to do is understand how swerve control works.\nOur controllers have two joysticks that can be used to control the robot.\nNote that the joystick with the blue arrows has them pointing in all directions. This represents where you want the robot to go to. The other joystick is for controlling the heading of the robot.\n‚ÑπÔ∏è The joystick with the blue is on the left and controlls the position of the robot. Swerve enables the robot to go in any direction, including sideways and forward, like a drone or helicopter. The purple arrows represent the manner that a person would want to turn the robot.\nThe control systems are intuitive and the robot‚Äôs positioning should look like this:\nNext we‚Äôll look at breaking the overall breakdown of swerve.\nüóíÔ∏è We use the ‚ÄúPS4‚Äù controllers (console controllers) as most people call them. This is intentional, and we recognize some teams use joysticks. We are using these because everyone has one of these at home, you can find them for very cheap at your local store, and translating it to using the joysticks isn‚Äôt too difficult. ","swerve-overview#Swerve Overview":"Swerve is a little complex at first, but to implement it takes a lot of thinking (trust me, I‚Äôll try to make it easy, so you don‚Äôt have to have a few existential crises as you program it for the sixth time)\nSwerve drive has to start with the basics: you have 4 wheels. The first thing you need to do is understand how they work.\nEach of your four wheels has some manner that they need to go to push your robot, and there are 2 different factors that show how they work. These are:\nSpeed - How fast you want your wheel to go. This is a number between 0 and 1, where 0 is not moving at all and 1 is maximum speed. Heading - The direction the wheel needs to go. ‚ÑπÔ∏è Heading: the angle that something is facing. It‚Äôs important because it is key to direction. Think of it as the angle something is at. Each wheel needs to go somewhere when we want the robot to move so we need to look at how we control the robot."},"title":"Looking at Swerve"},"/docs/frc/programming/intro-to-swerve/swerve-math/":{"data":{"swerve-controller-setup#Swerve Controller Setup":"Remember the controller?\nWell, these value are incredibly important when programming swerve. We went over what values should translate to what in swerve, but grabbing these values is key and is something that we should note.","swerve-math#Swerve Math":"Swerve Math","swerve-preliminary-steps#Swerve Preliminary Steps":"The first steps of swerve involve grabbing the values from your controller and using them to be able to put them into your program\nThe first thing it go grab the x and y from the controller.\nIn the beginning of the declaration of your code you should put\n1 public static XboxController controller = new XboxController(0); The controller‚Äôs state for x and y can be grabbed using the\n1 2 int x = controller.getLeftX(); int y = -controller.getLeftY(); To start with this I reccomend putting"},"title":"Swerve Math"},"/docs/frc/programming/intro-to-swerve/swerve-programming-setup/":{"data":{"":"","#":"Programming Setup To set up your programming environment you need to download the wpilib suite from GitHub, and if you need, you can look through the official website download (which redirects to the previous link) that gives a bit more info if you encounter problems.\nProject Setup Once you have the stuff installed and are ready to Program Swerve!!!\nYou should be able to make a new project and select template then java then Timed Robot (don‚Äôt select the advanced one).\nYou should have put the project in a folder (like Documents) and put in a team number (just put our team number, 9777 if you don‚Äôt have a team number yet, it‚Äôs not too important for simple development).\nThe code now should now be generated and in the left pane you should see this in the side pane:\nAs you can see, I have named the project ExampleSwerveDrive.\nYour code is located inside the src/main/java/frc/robot folder","setup-for-this-tutorial#Setup for This Tutorial":"One should make three new files, and one new folder.\nRight click on the src/main/java/frc/robot and click new file. When a text box appears, type in HardwareMappings.java. (Don‚Äôt worry about the text that appears for the file) Right click on the src/main/java/frc/robot and click the new folder and name it teleopswerve. Right click on the src/main/java/frc/robot/teleopswerve folder and make 2 new files (like in step 1) named SwerveModule.java and SwerveDrive.java. Now you‚Äôre done making all the files you‚Äôll need. The only thing left is the hit Ctrl+S for all the rest of the files. You‚Äôre setup should look like something like this.\n‚ÑπÔ∏è The white dot next to the filename in the editor means that the file is not saved, you can just select the file, and once it loads in the exitor, you can type Ctrl+S to save it "},"title":"Swerve Programming Setup"},"/docs/ftc/":{"data":{"":"","what-is-8081#What Is #8081":"Team #8081 is a FTC team from Gilbert, Arizona that functions from Gilbert Christian Schools and aims to provide opportunities to interact with STEM in association with FIRST.\nTeam #8081 is known as the Knights of the Lab Table and was founded in 2013."},"title":"FTC"}}